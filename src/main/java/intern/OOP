
1) [Что такое ООП?](#что-такое-ооп)
* Объектно-ориентированное программирование (ООП) - это парадигма (методология) программирования, в которой приложения состоят из взаимодействующих между собой объектов.
* Объект - это центр ООП. Нас окружают объекты, мы сами объекты. Объекты позволяют абстрагироваться или отвлечься от внутреннего устройства объекта и сфокусироваться на свойствах и возможностях этого объекта.
* Каждый объект - это отдельная сущность со своим набором данных и инструкциями к действию, то есть это элемент системы с присущими ему свойствами.
* Также объекты можно объединять в комплексные объекты, а их в свою очередь в целые системы. Это позволяет выполнять масштабные проекты.
* Класс - это описание объекта. Когда нам нужно, мы просим виртуальную машину сделать для нас объект по описанию, который мы делаем в классе.
* Основные достоинства ООП относительно других парадигм программирования - быстрое расширение программы путем добавления новых элементов, хорошая читаемость кода, возможность повторного использования написанного кода и относительная простота написания кода. Эти факторы в совокупности помогают создавать, расширять и поддерживать программы большого размера. Основными недостатками ООП являются увеличенное потребление памяти за счет использования объектов, а также меньшая производительность, так как внутренняя реализация предоставляемых языком средств тоже требует затрат.

2) [Базовые концепции ООП?](#базовые-концепции-ооп)
* Инкапсуляция - сокрытие реализации;
* Наследование - создание новой сущности на базе уже существующей;
* Полиморфизм - возможность иметь разные формы для одной и той же сущности;
* Абстракция - набор общих характеристик.

3) [Укажите из каких элементов состоит класс.](#укажите-из-каких-элементов-состоит-класс)
Класс состоит из полей (атрибуты, свойства или переменные) и методов (функции для работы с полями). Поля и методы называются членами класса. Поле (атрибут) класса - характеристика объекта, содержащая его состояние. Например, для коробки это может быть высота, ширина, длина, материал. Класс - ссылочный тип данных. Это шаблон для создания объекта, а объект - это экземпляр класса.
Метод класса в объектно-ориентированном программировании — это функция или процедура, принадлежащая какому-либо классу или объекту.

Как и процедура в процедурном программировании, метод состоит из некоторого количества операторов для выполнения определенного действия и может иметь набор входных параметров.

Различают простые методы и статические методы :

простые методы имеют доступ к данным объекта конкретного экземпляра (данного класса);
статические методы не имеют доступа к данным объекта, и для их использования не нужно создавать экземпляры (данного класса).
Методы предоставляют интерфейс, при помощи которого осуществляется доступ к данным объекта некоторого класса, тем самым, обеспечивая инкапсуляцию данных.

Кроме имени и тела (кода) у метода есть ряд других характеристик:

набор модификаторов;
тип возвращаемого значения;
набор аргументов (параметров).

4) [Что такое конструктор?](#что-такое-конструктор)
Конструктор - это специальный метод, который вызывается при создании нового объекта.
По сути конструктор нужен для автоматической инициализации переменных.
Конструкторы вызываются при создании нового объекта нашего класса. Имя конструктора совпадает с именем класса, в том числе и соблюдая регистр, при этом синтаксически конструктор похож на метод без возвращаемого значения.
Computer computer = new Computer();
То, что стоит после оператора new и есть вызов конструктора класса Computer, и в данном случае после имени класса мы ставим круглые скобки. Это подчеркивает, что конструктор - это метод. Однако сразу возникает вопрос – что мы можем вызывать, если никаких конструкторов в классе у нас нет. Связано это со следующим:
- если в классе не определенно ни одного конструктора, то для этого класса создается конструктор без параметров, или как его еще называют – дефолтный конструктор или конструктор по умолчанию.
Для создания объекта Computer мы используем выражение new Computer(). При этом оператор new выделяет память для нашего объекта computer типа Computer. На следующем этапе происходит вызов конструктора по умолчанию, который не принимает никаких параметров. После выполнения этого выражения в памяти будет выделен участок памяти, где будут храниться все данные нашего объекта. А в переменную computer будет записана ссылка на созданный объект.

5) [Можно ли наследовать конструктор?](#можно-ли-наследовать-конструктор)
 Конструктор не является членом класса, поэтому его нельзя наследовать, но с помощью super его можно вызвать. Когда нам нужно вызывать конструктор родителя? Всегда. Если в классе нет конструкторов, то конструктор по умолчанию вызывает конструктор по умолчанию своего родителя.
 https://job4j.ru/profile/exercise/21/task-view/149

6) [Что такое перегрузка конструктора?](#что-такое-перегрузка-конструктора)
Ранее мы уже упоминали, что в классе могут быть несколько конструкторов. Так вот такой механизм называется перегрузкой конструктора.

Перегрузка конструктора заключается в том, что мы можем объявить несколько конструкторов в одном классе. Конструктор – это особый метод, имя которого совпадает с именем класса. Однако с точки зрения синтаксиса языка, в некотором локальном пространстве не может быть двух одинаковых имен. Однако, в данном случае допускается объявление нескольких конструкторов, однако они должны отличаться набором параметров. Когда мы вызываем перегруженный конструктор, то из нескольких объявленных конструкторов, компилятор автоматически определяет нужный конструктор по его параметрам, которые указываются при вызове.

7) [Что такое статический метод?](#что-такое-статический-метод)
8) [Что такое не статический метод?](#что-такое-не-статический-метод)
9) [Для чего используется ключевое слово this?](#для-чего-используется-ключевое-слово-this)
10) [Какой класс является базовый родительным классов для всех классов?](#какой-класс-является-базовый-родительным-классов-для-всех-классов)
11) [Что такое наследование? Приведите примеры из реальной жизни.](#что-такое-наследование-приведите-примеры-из-реальной-жизни)
12) [Опишите процесс создания нового объекта.](#опишите-процесс-создания-нового-объекта)
13) [Как вызвать метод из родительского класса?](#как-вызвать-метод-из-родительского-класса)
14) [Что такое переопределение метода?](#что-такое-переопределение-метода)
15) [Можно ли переопределить статический метод?](#можно-ли-переопределить-статический-метод)
16) [Что такое виртуальная функция и используются ли они в Java?](#что-такое-виртуальная-функция-и-используются-ли-они-в-java)
17) [Что такое перегрузка метода?](#что-такое-перегрузка-метода)
18) [Можно ли изменить тип возвращаемых данных при перегрузке метода?](#можно-ли-изменить-тип-возвращаемых-данных-при-перегрузке-метода)
19) [Что такое множественное наследование? Как его можно реализовать в Java.](#что-такое-множественное-наследование-как-его-можно-реализовать-в-java)
20) [Что такое полиморфизм? Приведите примеры из реальной жизни.](#что-такое-полиморфизм-приведите-примеры-из-реальной-жизни)
21) [Что такое инкапсуляция?](#что-такое-инкапсуляция)
22) [Как реализована инкапсуляция в Java?](#как-реализована-инкапсуляция-в-java)
23) [Можно ли применить модификаторы доступа к конструкторам?](#можно-ли-применить-модификаторы-доступа-к-конструкторам)
24) [Что такое интерфейс?](#что-такое-интерфейс)
25) [Какие типы исключительных ситуаций бывают?](#какие-типы-исключительных-ситуаций-бывают)
26) [Назовите основные методы класса Object?](#назовите-основные-методы-класса-object)
27) [Что такое шаблоны проектирования?](#что-такое-шаблоны-проектирования)
28) [Объясните шаблон - декоратор. Придумайте пример не относящийся к технике.](#объясните-шаблон-декоратор-придумайте-пример-не-относящийся-к-технике)
29) [Объясните шаблон - стратегия. Придумайте пример не относящийся к технике.](#объясните-шаблон-стратегия-придумайте-пример-не-относящийся-к-технике)
30) [Объясните шаблон - синглетон. Придумайте пример не относящийся к технике.](#объясните-шаблон-синглетон-придумайте-пример-не-относящийся-к-технике)
31) [Объясните шаблон - фабричный метод. Придумайте пример не относящийся к технике.](#объясните-шаблон-фабричный-метод-придумайте-пример-не-относящийся-к-технике)