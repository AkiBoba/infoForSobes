
1) [Что такое ООП?](#что-такое-ооп)
* Объектно-ориентированное программирование (ООП) - это парадигма (методология) программирования, в которой приложения состоят из взаимодействующих между собой объектов.
* Объект - это центр ООП. Нас окружают объекты, мы сами объекты. Объекты позволяют абстрагироваться или отвлечься от внутреннего устройства объекта и сфокусироваться на свойствах и возможностях этого объекта.
* Каждый объект - это отдельная сущность со своим набором данных и инструкциями к действию, то есть это элемент системы с присущими ему свойствами.
* Также объекты можно объединять в комплексные объекты, а их в свою очередь в целые системы. Это позволяет выполнять масштабные проекты.
* Класс - это описание объекта. Когда нам нужно, мы просим виртуальную машину сделать для нас объект по описанию, который мы делаем в классе.
* Основные достоинства ООП относительно других парадигм программирования - быстрое расширение программы путем добавления новых элементов, хорошая читаемость кода, возможность повторного использования написанного кода и относительная простота написания кода. Эти факторы в совокупности помогают создавать, расширять и поддерживать программы большого размера. Основными недостатками ООП являются увеличенное потребление памяти за счет использования объектов, а также меньшая производительность, так как внутренняя реализация предоставляемых языком средств тоже требует затрат.

2) [Базовые концепции ООП?](#базовые-концепции-ооп)
* Инкапсуляция - сокрытие реализации;
* Наследование - создание новой сущности на базе уже существующей;
* Полиморфизм - возможность иметь разные формы для одной и той же сущности;
* Абстракция - набор общих характеристик.

3) [Укажите из каких элементов состоит класс.](#укажите-из-каких-элементов-состоит-класс)
Класс состоит из полей (атрибуты, свойства или переменные) и методов (функции для работы с полями). Поля и методы называются членами класса. Поле (атрибут) класса - характеристика объекта, содержащая его состояние. Например, для коробки это может быть высота, ширина, длина, материал. Класс - ссылочный тип данных. Это шаблон для создания объекта, а объект - это экземпляр класса.
Метод класса в объектно-ориентированном программировании — это функция или процедура, принадлежащая какому-либо классу или объекту.

Как и процедура в процедурном программировании, метод состоит из некоторого количества операторов для выполнения определенного действия и может иметь набор входных параметров.

Различают простые методы и статические методы :

простые методы имеют доступ к данным объекта конкретного экземпляра (данного класса);
статические методы не имеют доступа к данным объекта, и для их использования не нужно создавать экземпляры (данного класса).
Методы предоставляют интерфейс, при помощи которого осуществляется доступ к данным объекта некоторого класса, тем самым, обеспечивая инкапсуляцию данных.

Кроме имени и тела (кода) у метода есть ряд других характеристик:

набор модификаторов;
тип возвращаемого значения;
набор аргументов (параметров).

4) [Что такое конструктор?](#что-такое-конструктор)
Конструктор - это специальный метод, который вызывается при создании нового объекта.
По сути конструктор нужен для автоматической инициализации переменных.
Конструкторы вызываются при создании нового объекта нашего класса. Имя конструктора совпадает с именем класса, в том числе и соблюдая регистр, при этом синтаксически конструктор похож на метод без возвращаемого значения.
Computer computer = new Computer();
То, что стоит после оператора new и есть вызов конструктора класса Computer, и в данном случае после имени класса мы ставим круглые скобки. Это подчеркивает, что конструктор - это метод. Однако сразу возникает вопрос – что мы можем вызывать, если никаких конструкторов в классе у нас нет. Связано это со следующим:
- если в классе не определенно ни одного конструктора, то для этого класса создается конструктор без параметров, или как его еще называют – дефолтный конструктор или конструктор по умолчанию.
Для создания объекта Computer мы используем выражение new Computer(). При этом оператор new выделяет память для нашего объекта computer типа Computer. На следующем этапе происходит вызов конструктора по умолчанию, который не принимает никаких параметров. После выполнения этого выражения в памяти будет выделен участок памяти, где будут храниться все данные нашего объекта. А в переменную computer будет записана ссылка на созданный объект.

5) [Можно ли наследовать конструктор?](#можно-ли-наследовать-конструктор)
 Конструктор не является членом класса, поэтому его нельзя наследовать, но с помощью super его можно вызвать. Когда нам нужно вызывать конструктор родителя? Всегда. Если в классе нет конструкторов, то конструктор по умолчанию вызывает конструктор по умолчанию своего родителя.
 https://job4j.ru/profile/exercise/21/task-view/149

6) [Что такое перегрузка конструктора?](#что-такое-перегрузка-конструктора)
Ранее мы уже упоминали, что в классе могут быть несколько конструкторов. Так вот такой механизм называется перегрузкой конструктора.

Перегрузка конструктора заключается в том, что мы можем объявить несколько конструкторов в одном классе. Конструктор – это особый метод, имя которого совпадает с именем класса. Однако с точки зрения синтаксиса языка, в некотором локальном пространстве не может быть двух одинаковых имен. Однако, в данном случае допускается объявление нескольких конструкторов, однако они должны отличаться набором параметров. Когда мы вызываем перегруженный конструктор, то из нескольких объявленных конструкторов, компилятор автоматически определяет нужный конструктор по его параметрам, которые указываются при вызове.

7) [Что такое статический метод?](#что-такое-статический-метод)
 Статические методы принадлежат классу, а не объекту, соответственно вызывать можем их без создания экземпляра класса, в котором они находятся.  Важно помнить, что из статического метода можно получить доступ только к статическим переменным или вызывать другие статические методы.
 * Когда же стоит использовать статические методы?
 1. Для доступа или управления статическими переменными и другими статическими методами, которые не зависят от объектов;

 2. Для служебных, вспомогательных классов и интерфейсов, поскольку не требуют создания объекта и соответственно, обеспечивают большую производительность;

 3. Когда методу требуется доступ лишь к статическим полям класса.

 В завершении стоит подытожить и подчеркнуть особенности статических методов:

 1. Статические методы нельзя переопределять.

 2. Статические методы не могут использовать ключевые слова this (ссылка на текущий объект) или super (ссылка на объект суперкласса);

 3. Нестатические методы могут обращаться непосредственно как к методам класса (включая статические), так и к переменным класса (включая статические);

 4. Статические методы могут обращаться к статическим переменным и статическим методам;

 5. Статические методы могут обращаться ко всем статическим переменным и другим статическим методам. Однако они не могут напрямую обращаться к переменным класса и нестатическим методам. Для этого им нужны ссылки на объект.
 
8) [Что такое не статический метод?](#что-такое-не-статический-метод)
Нестатические методы могут обращаться непосредственно как к методам класса (включая статические), так и к переменным класса (включая статические);
Не статический метод в объектно-ориентированном программировании (ООП) - это метод, который принадлежит конкретному объекту класса, а не самому классу. Он может быть вызван только на экземпляре класса и имеет доступ к его состоянию (полям) и поведению (другим методам).

Не статические методы обычно используются для выполнения операций, специфичных для каждого объекта класса. Они могут изменять состояние объекта, взаимодействовать с другими объектами и выполнять различные действия, связанные с функциональностью класса.

9) [Для чего используется ключевое слово this?](#для-чего-используется-ключевое-слово-this)
Ключевое слово this в Java используется для ссылки на текущий объект, в контексте которого оно используется. Оно позволяет обращаться к полям, методам и конструкторам текущего объекта.

Вот несколько основных случаев использования ключевого слова this в Java:

1. Доступ к полям объекта: Ключевое слово this используется для обращения к полям объекта, чтобы разрешить возможное сокрытие имени переменной. Например:

public class Person {
    private String name;

    public void setName(String name) {
        this.name = name;
    }
}


В этом примере this.name ссылается на поле name объекта класса Person, чтобы отличить его от параметра метода setName.

2. Вызов конструктора: Ключевое слово this может использоваться для вызова другого конструктора в том же классе. Это называется конструктором-помощником. Например:

public class Person {
    private String name;
    private int age;

    public Person(String name) {
        this(name, 0); // Вызов другого конструктора класса Person
    }

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }
}


В этом примере конструктор Person(String name) вызывает другой конструктор Person(String name, int age) с помощью this(name, 0), чтобы избежать дублирования кода.

3. Передача текущего объекта: Ключевое слово this может использоваться для передачи текущего объекта в качестве аргумента метода или конструктора другого объекта. Например:


    class Person {
        private String name;

        public Person(String name) {
            this.name = name;
        }

        public void introduce() {
            Greeting.greet(this); // Передача текущего объекта в метод greet()
        }

        public static void main(String[] args) {
            Person person = new Person("Name");
            person.introduce();
        }


        public class Greeting {
            public static void greet(Person person) {
                System.out.println("Привет, " + person.name + "!");
            }
        }
    }



В этом примере метод introduce() класса Person передает текущий объект this (Имя переданное в конструктор класса Person при создании его экземпляра) в метод greet() класса Greeting, чтобы приветствовать человека по имени.

Ключевое слово this очень полезно для работы с объектами в Java и обеспечивает доступ к текущему объекту внутри его методов и конструкторов.

10) [Какой класс является базовый родительным классов для всех классов?](#какой-класс-является-базовый-родительным-классов-для-всех-классов)
java.lang.Object.

11) [Что такое наследование? Приведите примеры из реальной жизни.](#что-такое-наследование-приведите-примеры-из-реальной-жизни)
Наследование предназначено для создания и описания нового класса на основе уже существующего с частично или полностью заимствующейся функциональностью. Класс, от которого производится наследование, называется базовым(родительским). Новый класс - производный класс.

12) [Опишите процесс создания нового объекта.](#опишите-процесс-создания-нового-объекта)
* Person tom = new Person();
Для создания объекта Person используется выражение new Person(). Оператор new выделяет память для объекта Person. И затем вызывается конструктор по умолчанию, который не принимает никаких параметров. В итоге после выполнения данного выражения в памяти будет выделен участок, где будут храниться все данные объекта Person. А переменная tom получит ссылку на созданный объект.
* Если конструктор не инициализирует значения переменных объекта, то они получают значения по умолчанию. Для переменных числовых типов это число 0, а для типа string и классов - это значение null (то есть фактически отсутствие значения).
https://metanit.com/java/tutorial/3.1.php

13) [Как вызвать метод из родительского класса?](#как-вызвать-метод-из-родительского-класса)
Для вызова метода из родительского класса в Java необходимо использовать ключевое слово super :

14) [Что такое переопределение метода?](#что-такое-переопределение-метода)
Переопределение позволяет задать новое поведение уже существующего метода.
Механизм переопределения (overriding) существует только при условии наследования.
На собеседовании могут спросить что такое виртуальная функция - это функция (метод), которая может быть переопределена наследником. То есть почти все нестатические методы Java - это виртуальные функции (кроме private-методов, так как они не могут быть переопределены в связи с правами видимости). Статические методы принадлежат классу и не могут быть переопределены, поэтому они не являются виртуальными функциями.

15) [Можно ли переопределить статический метод?](#можно-ли-переопределить-статический-метод)
Переопределять можно только нестатические методы. Если же мы попытаемся переопределить статический метод, это будет называться "сокрытием метода из суперкласса".

16) [Что такое виртуальная функция и используются ли они в Java?](#что-такое-виртуальная-функция-и-используются-ли-они-в-java)
Это функция (метод), которая может быть переопределена наследником. То есть почти все нестатические методы Java - это виртуальные функции (кроме private-методов, так как они не могут быть переопределены в связи с правами видимости).

17) [Что такое перегрузка метода?](#что-такое-перегрузка-метода)
Это механизм позволяющий создавать методы с одинаковыми именами, но с разными входными параметрами.
* Поясним одно понятие - сигнатура метода.
Сигнатура метода - это сочетание имени метода и список параметров вместе с типами этих параметров. Больше никакие части объявления метода не входят в сигнатуру метода. Помните об этом.
Именно поэтому изменение типа возвращаемого значения не является достаточным условием перегрузки методов, поскольку возвращаемое не входит в сигнатуру метода. Изменения должны происходить именно в сигнатуре, а если быть точнее - то в его параметрах.
* Подведем итоги и опишем ситуации, при каких условиях возможна перегрузка:

- изменение типа одного или нескольких параметров;

- изменение порядка параметров, при условии что они имеют разные типы;

- изменение количества параметров.

18) [Можно ли изменить тип возвращаемых данных при перегрузке метода?](#можно-ли-изменить-тип-возвращаемых-данных-при-перегрузке-метода)
Изменение типа возвращаемого значения не является достаточным условием перегрузки методов, поскольку возвращаемое не входит в сигнатуру метода. Изменения должны происходить именно в сигнатуре, а если быть точнее - то в его параметрах.

19) [Что такое множественное наследование? Как его можно реализовать в Java.](#что-такое-множественное-наследование-как-его-можно-реализовать-в-java)
Множественное наследование — это функция, при которой один подкласс может наследоваться от более чем одного класса. Проще говоря, класс может иметь более одного суперкласса. Java не поддерживает множественное наследование.
Java не поддерживает множественное наследование классов, потому что это может привести к проблеме ромба (ромбовидное наследование).

20) [Что такое полиморфизм? Приведите примеры из реальной жизни.](#что-такое-полиморфизм-приведите-примеры-из-реальной-жизни)

21) [Что такое инкапсуляция?](#что-такое-инкапсуляция)
22) [Как реализована инкапсуляция в Java?](#как-реализована-инкапсуляция-в-java)
23) [Можно ли применить модификаторы доступа к конструкторам?](#можно-ли-применить-модификаторы-доступа-к-конструкторам)
24) [Что такое интерфейс?](#что-такое-интерфейс)
25) [Какие типы исключительных ситуаций бывают?](#какие-типы-исключительных-ситуаций-бывают)
26) [Назовите основные методы класса Object?](#назовите-основные-методы-класса-object)
27) [Что такое шаблоны проектирования?](#что-такое-шаблоны-проектирования)
28) [Объясните шаблон - декоратор. Придумайте пример не относящийся к технике.](#объясните-шаблон-декоратор-придумайте-пример-не-относящийся-к-технике)
29) [Объясните шаблон - стратегия. Придумайте пример не относящийся к технике.](#объясните-шаблон-стратегия-придумайте-пример-не-относящийся-к-технике)
30) [Объясните шаблон - синглетон. Придумайте пример не относящийся к технике.](#объясните-шаблон-синглетон-придумайте-пример-не-относящийся-к-технике)
31) [Объясните шаблон - фабричный метод. Придумайте пример не относящийся к технике.](#объясните-шаблон-фабричный-метод-придумайте-пример-не-относящийся-к-технике)