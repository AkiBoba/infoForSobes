1) Содержимое файла

    1. Каждый файл java должен содержать класс.
    2. Внутри класса должны быть методы.
    3. Внутри методов находятся операторы.
    4. Операторы - это инструкции для выполнения.

2) Заголовок в файле java
    1. Папки, находящиеся в папке "src/main/java", принято называть пакетами.
    2. Пакет представляет собой именованную совокупность классов (и, возможно, подпакетов). Пакеты группируют классы и определяют пространства имен для классов, которые в них входят.
    3. Полное имя класса записывается как составное имя пакета, в котором находится файл, плюс название самого файла.
    4. В Java есть общепринятое правило: все классы должны находиться в пакетах. Считается плохим тоном располагать файлы сразу в папке  "src/main/java". Поэтому каждая компания для расположения файлов использует имена домена в обратном порядке.
       Вы проходите обучение на курсе www.job4j.ru, поэтому все файлы и подпакеты нужно будет располагать в пакете "ru.job4j".

3)  Процесс компиляции и запуска Java программы
    1. Чтобы запустить программу на языке Java, нужно текстовый файл с командами преобразовать в инструкции, понятные компьютеру.
    Этот процесс выполняет компилятор Java.
    Получившийся файл называется файлом с байт-кодом. Чтобы компьютер понял этот байт-код, его нужно запустить через виртуальную машину Java.
    Виртуальная машина позволяет запустить байт-код на любых операционных системах.
    Программист не тратит время на адаптацию программы для работы в Windows, Linux  или Mac. Это выполняет виртуальная машина Java (JVM).
    2. Виртуальная машина - это прослойка между вашей программой и операционной системой.
    https://job4j.ru/profile/exercise/1/task-view/19

4)  Порядок организации компонентов класса
    1. Компоненты класса должны располагаться в следующем порядке: пакет, импорты, объявление класса, статические переменные класса, переменные экземпляра, конструкторы, методы.

5)  Правила написания кода. Java Code Conventions. [#504935]
    1. Это соглашение, в котором описаны рекомендации к написанию базовых конструкций языка Java - оформление отступов, пробелов, наименование переменных, методов и т.д. Благодаря таким соглашениям унифицируется "почерк" разработчика. Код, написанный в едином стиле, проще читать, акцентируя внимание на деталях, а не на попытках понять как устроен сам код

6)  Что такое переменная. [#3610 #205475]
    Всё программирование сводится к хранению, передаче и изменению данных.
    Для этих операций в программировании есть понятие переменная.

    Переменная – это элементарный контейнер для хранения данных.

    Как и в реальной жизни, контейнеры создают для хранения определенных вещей. Например: жидкости, горючих или сыпучих веществ и т.д. То есть у каждого контейнера есть определенный тип хранимых данных.
    Для того, чтобы в Java создать переменную, необходимо использовать следующий шаблон.
    java
    ТИП_ДАННЫХ ИМЯ_ПЕРЕМЕННОЙ = ЗНАЧЕНИЕ_ПЕРЕМЕННОЙ;

7) Переменные и константы
    Переменные объявляются следующим образом: тип_данных имя_переменной; (int x;)
    Объявив переменную, мы можем присвоить ей значение:
    int x;      // объявление переменной
    x = 10;     // присвоение значения
    System.out.println(x);  // 10
    Также можно присвоить значение переменной при ее объявлении. Этот процесс называется инициализацией:
    Ключевое слово var
    Начиная с Java 10 в язык было добавлено ключевое слово var, которое также позволяет определять переменную:
    var x = 10;
    System.out.println(x);  // 10
    Слово var ставится вместо типа данных, а сам тип переменной выводится из того значения, которое ей присваивается. Например, переменной x присваивается число 10, значит, переменная будет представлять тип int.

    Но если переменная объявляется с помощью var, то мы обязательно должны инициализировать ее, то есть предоставить ей начальное значение, иначе мы получим ошибку, как, например, в следующем случае:
    var x;      // ! Ошибка, переменная не инициализирована
    x = 10;
    Константы
    Кроме переменных, в Java для хранения данных можно использовать константы. В отличие от переменных константам можно присвоить значение только один раз. Константа объявляется также, как и переменная, только вначале идет ключевое слово final:
    final int LIMIT = 5;
    System.out.println(LIMIT);  // 5
    // LIMIT=57; // так мы уже не можем написать, так как LIMIT - константа
    Как правило, константы имеют имена в верхнем регистре.

    Константы позволяют задать такие переменные, которые не должны больше изменяться. Например, если у нас есть переменная для хранения числа pi, то мы можем объявить ее константой, так как ее значение постоянно.

8)  Типы данных
    Одной из основных особенностей Java является то, что данный язык является строго типизированным. А это значит, что каждая переменная и константа представляет определенный тип и данный тип строго определен. Тип данных определяет диапазон значений, которые может хранить переменная или константа.
    boolean: хранит значение true или false
    byte: хранит целое число от -128 до 127 и занимает 1 байт
    short: хранит целое число от -32768 до 32767 и занимает 2 байта
    int: хранит целое число от -2 147 483 648 до 2 147 483 647 и занимает 4 байта
    long: хранит целое число от –9 223 372 036 854 775 808 до 9 223 372 036 854 775 807 и занимает 8 байт
    double: хранит число с плавающей точкой от ±4.9*10-324 до ±1.7976931348623157*10308 и занимает 8 байт
    float: хранит число с плавающей точкой от -3.4*1038 до 3.4*1038 и занимает 4 байта
    float x = 8.5F;
    char: хранит одиночный символ в кодировке UTF-16 и занимает 2 байта, поэтому диапазон хранимых значений от 0 до 65535

9)  Арифметические операции
    В арифметических операциях участвуют числа. В Java есть бинарные арифметические операции (производятся над двумя операндами) и унарные (выполняются над одним операндом). К бинарным операциям относят следующие:
    + - * /
    При делении стоит учитывать, что если в операции участвуют два целых числа, то результат деления будет округляться до целого числа, даже если результат присваивается переменной float или double:
    double k = 10 / 4;     // 2
    System.out.println(k);
    Чтобы результат представлял число с плавающей точкой, один из операндов также должен представлять число с плавающей точкой:
    double k = 10.0 / 4;     // 2.5
    %
    получение остатка от деления двух чисел:
    int a = 33;
    int b = 5;
    int c = a % b;  // 3
    int d = 22 % 4; // 2 (22 - 4*5 = 2)
    Также есть две унарные арифметические операции, которые производятся над одним числом: ++ (инкремент) и -- (декремент). Каждая из операций имеет две разновидности: префиксная и постфиксная:
    ++ (префиксный инкремент)
    Предполагает увеличение переменной на единицу, например, z=++y (вначале значение переменной y увеличивается на 1, а затем ее значение присваивается переменной z)
    int a = 8;
    int b = ++a;
    System.out.println(a);  // 9
    System.out.println(b);  // 9
    ++ (постфиксный инкремент)
    Также представляет увеличение переменной на единицу, например, z=y++ (вначале значение переменной y присваивается переменной z, а потом значение переменной y увеличивается на 1)
    int a = 8;
    int b = a++;
    System.out.println(a);  // 9
    System.out.println(b);  // 8
    -- (префиксный декремент)
    уменьшение переменной на единицу, например, z=--y (вначале значение переменной y уменьшается на 1, а потом ее значение присваивается переменной z)
    int a = 8;
    int b = --a;
    System.out.println(a);  // 7
    System.out.println(b);  // 7
    -- (постфиксный декремент)
    z=y-- (сначала значение переменной y присваивается переменной z, а затем значение переменной y уменьшается на 1)
    int a = 8;
    int b = a--;
    System.out.println(a);  // 7
    System.out.println(b);  // 8

    Приоритет арифметических операций
    Одни операции имеют больший приоритет, чем другие, и поэтому выполняются вначале. Операции в порядке уменьшения приоритета:

    ++ (постфиксный инкремент), -- (постфиксный декремент)

    ++ (префиксный инкремент), -- (префиксный декремент)

    * (умножение), / (деление), % (остаток от деления)

    + (сложение), - (вычитание)

    Приоритет операций следует учитывать при выполнении набора арифметических выражений:
    int a = 8;
    int b = 7;
    int c = a + 5 * ++b;
    System.out.println(c);  // 48
    Вначале будет выполняться операция инкремента ++b, которая имеет больший приоритет - она увеличит значение переменной b и возвратит его в качестве результата. Затем выполняется умножение 5 * ++b, и только в последнюю очередь выполняется сложение a + 5 * ++b

    Скобки позволяют переопределить порядок вычислений:
    int a = 8;
    int b = 7;
    int c = (a + 5) * ++b;
    System.out.println(c);  // 104
    Несмотря на то, что операция сложения имеет меньший приоритет, но вначале будет выполняться именно сложение, а не умножение, так как операция сложения заключена в скобки.

    Ассоциативность операций
    Кроме приоритета операции отличаются таким понятием как ассоциативность. Когда операции имеют один и тот же приоритет, порядок вычисления определяется ассоциативностью операторов. В зависимости от ассоциативности есть два типа операторов:

    Левоассоциативные операторы, которые выполняются слева направо

    Правоассоциативные операторы, которые выполняются справа налево

    Так, некоторые операции, например, операции умножения и деления, имеют один и тот же приоритет. Какой же тогда будет результат в выражении:
    int x = 10 / 5 * 2;
    Стоит нам трактовать это выражение как (10 / 5) * 2 или как 10 / (5 * 2)? Ведь в зависимости от трактовки мы получим разные результаты.

    Все арифметические операторы (кроме префиксного инкремента и декремента) являются левоассоциативными, то есть выполняются слева направо. Поэтому выражение 10 / 5 * 2 необходимо трактовать как (10 / 5) * 2, то есть результатом будет 4.

    Операции с числами с плавающей точкой
    Следует отметить, что числа с плавающей точкой не подходят для финансовых и других вычислений, где ошибки при округлении могут быть критичными. Например:
    double d = 2.0 - 1.1;
    System.out.println(d);
    В данном случае переменная d будет равна не 0.9, как можно было бы изначально предположить, а 0.8999999999999999. Подобные ошибки точности возникают из-за того, что на низком уровне для представления чисел с плавающей точкой применяется двоичная система, однако для числа 0.1 не существует двоичного представления, также как и для других дробных значений. Поэтому в таких случаях обычно применяется класс BigDecimal, который позволяет обойти подобные ситуации.

10) Условные выражения
    == != > < >= <=
11)    Логические операции
    Также в Java есть логические операции, которые также представляют условие и возвращают true или false и обычно объединяют несколько операций сравнения. К логическим операциям относят следующие:

    |

    c=a|b; (c равно true, если либо a, либо b (либо и a, и b) равны true, иначе c будет равно false)

    &

    c=a&b; (c равно true, если и a, и b равны true, иначе c будет равно false)

    !

    c=!b; (c равно true, если b равно false, иначе c будет равно false)

    ^

    c=a^b; (c равно true, если либо a, либо b (но не одновременно) равны true, иначе c будет равно false)

    ||

    c=a||b; (c равно true, если либо a, либо b (либо и a, и b) равны true, иначе c будет равно false)

    &&

    c=a&&b; (c равно true, если и a, и b равны true, иначе c будет равно false)

    Здесь у нас две пары операций | и || (а также & и &&) выполняют похожие действия, однако же они не равнозначны.

    Выражение c=a|b; будет вычислять сначала оба значения - a и b и на их основе выводить результат.

    В выражении же c=a||b; вначале будет вычисляться значение a, и если оно равно true, то вычисление значения b уже смысла не имеет, так как у нас в любом случае уже c будет равно true. Значение b будет вычисляться только в том случае, если a равно false

    То же самое касается пары операций &/&&. В выражении c=a&b; будут вычисляться оба значения - a и b.

    В выражении же c=a&&b; сначала будет вычисляться значение a, и если оно равно false, то вычисление значения b уже не имеет смысла, так как значение c в любом случае равно false. Значение b будет вычисляться только в том случае, если a равно true

    Таким образом, операции || и && более удобны в вычислениях, позволяя сократить время на вычисление значения выражения и тем самым повышая производительность. А операции | и & больше подходят для выполнения поразрядных операций над числами.

12)
