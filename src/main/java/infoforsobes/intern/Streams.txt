https://habr.com/ru/post/437038/ - Руководство по Java Stream API
появились в Java версии 8

Этот интерфейс позволяет гибко работать с коллекциями.

Stream API работает совместно с лямбда-выражениями.

Stream API - это поток данных.

Каждый элемент коллекции проходит 3 стадии.

1. Фильтрация;

2. Преобразование;

3. Упрощение или аккумуляция.

Каждая стадия может использоваться отдельно или совместно.

В Java Stream API представлены 2 типа методов:

- Промежуточные (конвейерные). Преобразовывают элементы потока, возвращая новый преобразованный поток. Методов данного типа может быть сколько угодно в цепочке преобразований элементов потока. Данные методы ленивы, то есть отрабатывают только когда для потока вызван конечный метод. Промежуточных методов у потока может и не быть. Промежуточные операции не выполняются без конечных! Промежуточные методы ленивы - они начинают вычисляться только когда начнется терминальная операция, то есть вычисление происходит только тогда, когда оно нужно.

- Конечные (терминальные). Метод данного типа всегда один, располагается в конце цепочки промежуточных методов (если они есть). Данный метод возвращает другой тип объекта (например, Optional, коллекцию и т.д.). То есть конечный метод собирает результаты обработки элементов потока и возвращает единый результат. Конечный метод для завершения потока обязателен.



Ниже перечислены основные промежуточные и конечные методы с коротким описанием. Далее в этом разделе многие из этих методов мы разберем на практических примерах.



Промежуточные (конвейерные) методы:

- filter() - фильтрует элементы потока, возвращая только элементы, удовлетворяющие условию.

- map() - преобразует каждый элемент потока.

- mapToInt() - тот же map(), но возвращает поток примитивов int (также есть соответствующие mapToDouble() и mapToLong()).

- flatMap() - трансформирует каждый объект потока в поток других объектов, то есть все элементы коллекции коллекций или потока потоков трансформирует в единый поток. (также поддерживает возврат потоков примитивов с помощью методов flatMapToInt(), flatMapToDouble(), flatMapToLong()). Может преобразовывать элементы, применяя указанную функцию к каждому элементу.

- peek() - применяет функцию Consumer к каждому элементу потока.

- sorted() - сортирует элементы потока по возрастанию. Возможна сортировка по убыванию при передаче соответствующего компаратора.

-  skip() - пропускает указанное число элементов с начала потока.

- limit() - делает выборку первых элементов из родного потока в указанном количестве (отбирает элементы из потока, пока не достигнет указанного количества).

- distinct() - убирает дубликаты из потока.

- mapToObj() - трансформирует числовой поток в объектный.



Конечные (терминальные) методы:

- forEach() - применяет функцию к каждому элементу потока.

- collect() - собирает все элементы потока в структуру данных.

- toArray() - собирает элементы потока в массив.

- count() - возвращает количество элементов в потоке.

- min() - возвращает минимальный элемент (условие передается в компараторе).

- max() - возвращает максимальный элемент (условие передается в компараторе).

- sum() - возвращает сумму всех элементов потока (только для числовых потоков).

- average() - возвращает среднее арифметическое всех элементов потока (только для числовых потоков).

- allMatch() - возвращает true, если все элементы удовлетворяют условию.

- noneMatch() - возвращает true, если все элементы не удовлетворяют условию.



Конечные (терминальные) методы, делающие обход потока только до нахождения элемента, удовлетворяющего условию:

- findFirst() - возвращает Optional с первым элементом потока (если он есть), иначе возвращает пустой Optional.

- findAny() - возвращает Optional со случайным элементом потока.

- anyMatch() - возвращает true, если хотя бы один элемент удовлетворяет условию.

